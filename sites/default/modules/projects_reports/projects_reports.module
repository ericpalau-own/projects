<?php

/**
 * @file
 * Create a new page with needed tables and graphs
 * 
 * This module extracts all projects by workflow for all the clients
 */


/**
 * Implements hook_menu().
 */
function projects_reports_menu() {
  $items = array();
  $items['reports/clients'] = array(
    'title' => 'Reports',
    'file' => 'includes/projects_reports.projects.inc',
    'page callback' => 'projects_reports_clients_page',
    'access arguments' => array('access clients reports'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu'
  );
  $items['reports/clients/projects'] = array(
    'title' => 'Projects reports',
    'file' => 'includes/projects_reports.projects.inc',
    'page callback' => 'projects_reports_clients_page',
    'access arguments' => array('access clients reports'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2
  );
  $items['reports/clients/engagements'] = array(
    'title' => 'Engagements reports',
    'file' => 'includes/projects_reports.engagements.inc',
    'page callback' => 'projects_reports_clients_page_2',
    'access arguments' => array('access clients reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['reports/clients/projects_csv'] = array(
    'title' => 'Client reports',
    'page callback' => 'projects_reports_clients_csv',
    'access arguments' => array('access clients reports'),
    'type' => MENU_CALLBACK,
  );
  $items['reports/clients/engagements_csv'] = array(
    'title' => 'Client reports',
    'page callback' => 'projects_reports_clients_csv_2',
    'access arguments' => array('access clients reports'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function projects_reports_permission() {
  return array(
    'access clients reports' => array(
      'title' => t('Access clients reports'),
      'description' => t('Access clients reports page to see the table and the graphs.'),
    ),
  );
}


/**
 * Return nodes attached to a term with current state attached to the workflow state across all field instances .
 *
 * This function requires taxonomy module to be maintaining its own tables,
 * and will return an empty array if it is not. If using other field storage
 * methods alternatives methods for listing terms will need to be used.
 *
 * @param $tid
 *   The term ID.
 * @param $pager
 *   Boolean to indicate whether a pager should be used.
 * @param $limit
 *   Integer. The maximum number of nodes to find.
 *   Set to FALSE for no limit.
 * @param $order
 *   An array of fields and directions.
 * @param $sid
 *   The workflow state id
 *
 * @return
 *   An array of nids matching the query.
 */
function projects_reports_taxonomy_select_nodes_by_state($tid, $pager = TRUE, $limit = FALSE, $order = array('t.sticky' => 'DESC', 't.created' => 'DESC'), $sid) {
  if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
    return array();
  }
  $query = db_select('taxonomy_index', 't');
  $query->addTag('node_access');
  $query->condition('tid', $tid);
  if ($pager) {
    $count_query = clone $query;
    $count_query->addExpression('COUNT(t.nid)');

    $query = $query->extend('PagerDefault');
    if ($limit !== FALSE) {
      $query = $query->limit($limit);
    }
    $query->setCountQuery($count_query);
  }
  else {
    if ($limit !== FALSE) {
      $query->range(0, $limit);
    }
  }
  // HACK INIT
  // We join the workflow status here, to get only the needed nodes
  $query->join('workflow_node', 'wn', 't.nid=wn.nid');
  $query->addField('wn', 'sid');
  $query->condition('sid', $sid);
  // HACK END
  $query->addField('t', 'nid');
  $query->addField('t', 'tid');
  foreach ($order as $field => $direction) {
    $query->orderBy($field, $direction);
    // ORDER BY fields need to be loaded too, assume they are in the form
    // table_alias.name
    list($table_alias, $name) = explode('.', $field);
    $query->addField($table_alias, $name);
  }
  return $query->execute()->fetchCol();
}

/**
 * Exports a CSV.
 *
 * @param array $variables
 *   An associative array of data containing "header" and "rows" keys.
 *   This is ready to be passed to theme_table(). See api.drupal.org/node/22950.
 *   Also contains the key "filename" specifying the filename.
 */
function projects_reports_clients_csv() {
  // Get table data
  module_load_include('inc', 'projects_reports', 'includes/projects_reports.projects');
  $variables = projects_reports_get_table_data(TRUE);
  
  // Add filename
  $variables['filename'] = 'projects.csv';
  
  // Prepare csv headers
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $variables['filename']);

  $output = '';
  $keys = array();
  foreach ($variables['header'] as $key => $value) {
    $keys[] = $value;
  }
  if ($keys) {
    $output .= implode(",", $keys) . "\r\n";
  }
  foreach ($variables['rows'] as $value) {
    $output .= implode(",", $value) . "\r\n";
  }
  print $output;
  exit;
}

