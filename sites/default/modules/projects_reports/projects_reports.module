<?php

/**
 * @file
 * Create a new page with needed tables and graphs
 * 
 * This module extracts all projects by workflow for all the clients
 */


/**
 * Implements hook_menu().
 */
function projects_reports_menu() {
  $items = array();
  $items['reports/clients'] = array(
    'title' => 'Client reports',
    'page callback' => 'projects_reports_clients_page',
    'access arguments' => array('access clients reports'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu'
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function projects_reports_permission() {
  return array(
    'access clients reports' => array(
      'title' => t('Access clients reports'),
      'description' => t('Access clients reports page to see the table and the graphs.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function projects_reports_theme() {
  return array(
    'projects_reports_graph' => array(
      'variables' => array(
        'chart_data' => NULL,
        'workflow' => NULL,
      ),
    ),
  );
}

function projects_reports_clients_page() {
	$output = '';
	
	// Add table
	$output .= projects_reports_clients_table();

	// Add example grapsh
//	$output .= projects_reports_clients_example_graph();
	
	// Add grapsh
	$output .= projects_reports_clients_graph();
	$output .= projects_reports_clients_graph2();
	
	return $output;
}

/**
 * 
 * Add example graph
 */
function projects_reports_clients_example_graph() {
	$chart = array(
      '#chart_id' => 'test_chart',
      '#title' => chart_title(t('Bar Chart'), '0000ee', 15),
      '#type' => CHART_TYPE_BAR_V,
      '#size' => chart_size(400, 200),
      '#grid_lines' => chart_grid_lines(10, 5),
      '#bar_size' => chart_bar_size(15, 5), 
    );
	
	  $chart['#data'][] = array(30, 20, 10, 40);
	  $chart['#data'][] = array(30, 20, 10, 40);
	  $chart['#data'][] = array(30, 20, 10, 40);

	  $chart['#labels'][] = 'a';
	  $chart['#labels'][] = 'b';
	  $chart['#labels'][] = 'c';
	  $chart['#labels'][] = 'd';
	  
	  $chart['#data_colors'][] = chart_unique_color('test_a');
	  $chart['#data_colors'][] = chart_unique_color('test_b');
	  $chart['#data_colors'][] = chart_unique_color('test_c');
	  
	  return theme('chart', array('chart' => $chart));
}


function projects_reports_clients_graph2() {
  $chart = array(
    '#type' => 'chart',
    '#chart_type' => 'column',
    '#title' => t('Column simple'),
    '#chart_library' => 'google',
  );
  $chart['male'] = array(
    '#type' => 'chart_data',
    '#title' => t('Male'),
    '#data' => array(10, 20, 30),
    '#suffix' => 'lbs',
  );
  $chart['female'] = array(
    '#type' => 'chart_data',
    '#title' => t('Female'),
    '#data' => array(12, 22, 32),
    '#suffix' => 'lbs',
  );
  $chart['xaxis'] = array(
    '#type' => 'chart_xaxis',
    '#labels' => array('Jan', 'Feb', 'Mar'),
  );

  return drupal_render($chart);
  
}


/**
 * Process requests for 'reports/clients' path.
 */

function projects_reports_clients_graph() {
	$settings = array(
    '#chart_id' => 'test_chart2',
    '#title' => chart_title(t('Monthly Client report graph'), '000000', 30),
    '#type' => CHART_TYPE_BAR_V,
    '#size' => chart_size(900, 300),
    '#bar_size' => chart_bar_size(30, 15), 
//    '#grid_lines' => chart_grid_lines(10, 30),
    );
    
//	  $settings['#mixed_axis_labels'][CHART_AXIS_Y_RIGHT][1][] = chart_mixed_axis_label(t('Clients'));
//	  $settings['#mixed_axis_labels'][CHART_AXIS_X_TOP][2][] = chart_mixed_axis_label(t('Projects'));

  // Get workflow states
  $workflows = workflow_get_workflow_states_by_type('project');
  // Delete creation workflow, not needed
	unset($workflows[0]);
  
  foreach ($workflows as $key => $wf) {
    $settings['#legends'][] = $wf->state;
    $settings['#data_colors'][] = chart_unique_color($wf->state, 'workflow');
  }
	// Get clients list
	$num_projects_per_client = array();
  $clients = taxonomy_get_tree(3);
  foreach ($clients as $key => $cl) {
//  	$settings['#labels'][] = $cl->name;
  	$settings['#labels'][] = $cl->tid;
  	$num_projects_per_client[] = count(taxonomy_select_nodes($cl->tid, FALSE, FALSE, array()));
  }
  
  // Fill chart data
    foreach ($workflows as $key => $wf) {
      $row = array();
      foreach ($clients as $client) {
	      $nodes_related_pro = projects_reports_taxonomy_select_nodes_by_state($client->tid, false, false, array(), $wf->sid);
	      //Store them in the row array
	      $row[] = count($nodes_related_pro);
	    }
    $settings['#data'][] = $row;
  }
  
  // Add Y max value
//  $settings['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, max($num_projects_per_client)*2);
  
  $settings['#adjust_resolution'] = array(
    '#adjust' => TRUE,
    '#max' => max($num_projects_per_client)+1,
  );
  
  return theme('chart', array('chart' => $settings));
}

/**
 * Process requests for 'reports/clients' path.
 */
function projects_reports_clients_table() {
  // Get clients list
  $clients = taxonomy_get_tree(3);
  
  // Get workflow states
  $workflows = workflow_get_workflow_states_by_type('project');
  
  // Unset creation state
  unset($workflows[0]);

  // Prepare table header
  $header = array();

  // First header item is static. It will contain the status column
  $header[] = t('status');  
  
  // Add a header entry foreach client
  foreach ($clients as $client) {
    // Add client to the header list
    $header[] = $client->name . ' (' . $client->tid . ')';
  }
  
  // Last header item is static. It will contain the sum of each row, the status total projects
  $header[] = array(
     'data' => t('total'),
     'class' => 'highlight'
    );
    
  // Initialize table data.  
  $rows = array();
  
  // Prepare content data 
  // Each row will be a workflow status
  foreach ($workflows as $key => $wf) {
  	$row = array();
  	// Initialize total project cont for workflow status
  	$total_project_cont = 0;
  	
  	// The first item for each row will be the workflow status label
  	$row[] = $wf->state;
  	
  	// Foreach client, we check the number of projects for the current state and add them to the row array
	  foreach ($clients as $client) {
	  	// We init the project cont
	  	$nodes_related_pro = 0;
	  	// Get all project from client $client with the status $wf->sid
	  	$nodes_related_pro = projects_reports_taxonomy_select_nodes_by_state($client->tid, false, false, array(), $wf->sid);
	  	//Store them in the row array
	  	$row[] = count($nodes_related_pro);
	  	// We sum the project cont to the total project cont for current workflow status
	  	$total_project_cont += count($nodes_related_pro);
	  }
	  // The last item of the row will be the sum of all project of the current state
	  $row[] = array(
	   'data' => $total_project_cont,
	   'class' => 'highlight'
	  );
	  // Add row to the total rows array
	  $rows[] = $row;
  }
  
  // Prepare table to theme it
  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => '',
    'empty' => t('No projects found'),
  );
  
  // Return themed table
  return theme_table($variables);
}


/**
 * Return nodes attached to a term with current state attached to the workflow state across all field instances .
 *
 * This function requires taxonomy module to be maintaining its own tables,
 * and will return an empty array if it is not. If using other field storage
 * methods alternatives methods for listing terms will need to be used.
 *
 * @param $tid
 *   The term ID.
 * @param $pager
 *   Boolean to indicate whether a pager should be used.
 * @param $limit
 *   Integer. The maximum number of nodes to find.
 *   Set to FALSE for no limit.
 * @param $order
 *   An array of fields and directions.
 * @param $sid
 *   The workflow state id
 *
 * @return
 *   An array of nids matching the query.
 */
function projects_reports_taxonomy_select_nodes_by_state($tid, $pager = TRUE, $limit = FALSE, $order = array('t.sticky' => 'DESC', 't.created' => 'DESC'), $sid) {
  if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
    return array();
  }
  $query = db_select('taxonomy_index', 't');
  $query->addTag('node_access');
  $query->condition('tid', $tid);
  if ($pager) {
    $count_query = clone $query;
    $count_query->addExpression('COUNT(t.nid)');

    $query = $query->extend('PagerDefault');
    if ($limit !== FALSE) {
      $query = $query->limit($limit);
    }
    $query->setCountQuery($count_query);
  }
  else {
    if ($limit !== FALSE) {
      $query->range(0, $limit);
    }
  }
  // HACK INIT
  // We join the workflow status here, to get only the needed nodes
  $query->join('workflow_node', 'wn', 't.nid=wn.nid');
  $query->addField('wn', 'sid');
  $query->condition('sid', $sid);
  // HACK END
  $query->addField('t', 'nid');
  $query->addField('t', 'tid');
  foreach ($order as $field => $direction) {
    $query->orderBy($field, $direction);
    // ORDER BY fields need to be loaded too, assume they are in the form
    // table_alias.name
    list($table_alias, $name) = explode('.', $field);
    $query->addField($table_alias, $name);
  }
  return $query->execute()->fetchCol();
}


function projects_reports_chart_color_schemes() {
  return array(
    'workflow' => array(
      'start' => 'FA5858',
      'intercomms' => 'FAAC58',
      'on going' => 'F4FA58',
      'blocked' => 'ACFA58',
	    'delayed' => '58FA58',
	    'completed' => '5882FA',
    ),
  );
}